{"version":3,"sources":["assets/pomodoro_alarm.mp3","components/Pomodoro/Pomodoro.js","components/Stopwatch/Stopwatch.js","redux/reducers/rootReducer.js","redux/reducers/clockReducer.js","redux/actions/types.js","redux/reducers/pomodoroReducer.js","redux/reducers/stopwatchReducer.js","redux/store.js","components/Loader/Loader.js","components/Header.js","components/Navbar.js","components/Clock/Clock.js","components/Pomodoro/Alarm.js","components/Pomodoro/Controls.js","components/Pomodoro/Meter.js","components/Pomodoro/ProgressBar.js","components/Pomodoro/Task.js","redux/actions/pomodoroActions.js","components/Stopwatch/Clockface.js","components/Stopwatch/Interface.js","redux/actions/stopwatchActions.js","components/App.js","redux/actions/clockActions.js","index.js"],"names":["module","exports","intervalTimer","combineReducers","clock","state","action","type","currentTime","payload","pomodoro","taskName","workDuration","breakDuration","timeLeft","numOfPomodoros","pomodorosComplete","currentTimer","nextTimerName","nextTimerDuration","stopwatch","currentElapsedTime","totalElapsedTime","laps","middleWare","thunk","store","createStore","rootReducer","hours","minutes","seconds","date","applyMiddleware","Loader","className","Provider","value","Header","currentApp","themeColor","appChanged","resetAppChange","setTimeout","style","borderLeftColor","replace","href","target","rel","Navbar","setApp","handleClick","e","onClick","connect","showClock","hoursArr","Array","keys","map","x","minutesArr","hourElements","hour","index","degToRotate","transform","key","minuteElements","min","emsToTranslate","secondsDeg","minuteTransitionDeg","minutesDeg","hourTransitionDeg","hoursDeg","Alarm","id","src","alarmUrl","Controls","openTaskSettings","startStop","reset","timerRunning","disabled","Meter","pomodoroMeter","item","pomodoroClasses","ProgressBar","allPomodorosComplete","r","cx","cy","props","showTaskPage","addNewTask","closeTaskPage","useForm","register","handleSubmit","errors","pomodoroNumList","num","pomodoroDurationList","minute","breakDurationList","onSubmit","taskSettings","newTask","parseInt","pomodoroNumber","pomodoroDuration","htmlFor","name","placeholder","defaultValue","onFocus","select","ref","maxLength","dispatch","addTask","updateTimer","switchTimer","nextTimer","resetTimer","finishedPomodoro","showPomodoro","useState","setShowTaskPage","setTimerRunning","setProgress","timerName","timerColor","timerDuration","offset","circle","document","querySelector","radius","baseVal","circumference","Math","PI","stroke","strokeDasharray","strokeDashoffset","useEffect","clearInterval","newTaskObj","classList","remove","todo","getCurrentTask","floor","sec","formatTime","totalTime","setInterval","alarm","getElementById","play","playAlarm","getNextTimer","Clockface","secondValuesArr","secondMarkersArr","minuteValuesArr","minuteMarkersArr","secondValues","secondMarkers","minuteValues","minuteMarkers","Interface","stopwatchRunning","createLap","startPause","startTime","millisecElapsed","updateStopwatch","elapsedTime","pauseStopwatch","resetStopwatch","recordLap","newLap","lapTime","showStopwatch","setStopwatchRunning","formatDigitalOutput","totalTimeInMillisec","timeValues","secHundredth","timeDigital","Object","entries","forEach","formatted","push","join","lapList","lap","time","documentElement","clientWidth","width","length","Date","getTime","now","getCurrentTime","getHours","getMinutes","getSeconds","getDay","getDate","getMonth","getFullYear","selectedApp","setSelectedApp","setShowClock","setShowPomodoro","setShowStopwatch","setAppChanged","theme","setTheme","window","getComputedStyle","getPropertyValue","toLowerCase","ReactDOM","render"],"mappings":"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","file":"static/js/main.903d058f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pomodoro_alarm.a87a9f32.mp3\";","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTask, updateTimer, switchTimer, resetTimer, finishedPomodoro } from '../../redux/actions/pomodoroActions';\r\nimport Alarm from './Alarm';\r\nimport Controls from './Controls';\r\nimport Meter from './Meter';\r\nimport ProgressBar from './ProgressBar';\r\nimport Task from './Task';\r\nimport './Pomodoro.css';\r\n\r\nlet intervalTimer;\r\n\r\nconst Pomodoro = (props) => {\r\n    const {\r\n        showPomodoro,\r\n        addTask,\r\n        updateTimer,\r\n        switchTimer,\r\n        resetTimer,\r\n        finishedPomodoro,\r\n        taskName,\r\n        currentTimer,\r\n        timeLeft,\r\n        workDuration,\r\n        breakDuration,\r\n        numOfPomodoros,\r\n        pomodorosComplete\r\n    } = props;\r\n\r\n    const [showTaskPage, setShowTaskPage] = useState(false);\r\n    const [timerRunning, setTimerRunning] = useState(false);\r\n\r\n    function startStop() {\r\n        // Pause Timer\r\n        if (timerRunning) {\r\n            setTimerRunning(false);\r\n            clearInterval(intervalTimer);\r\n        }\r\n        // Start Timer\r\n        else {\r\n            setTimerRunning(true);\r\n            let totalTime = timeLeft;\r\n            let timerName = currentTimer;\r\n            intervalTimer = setInterval(() => {\r\n                // Until total time left is 0, update timer by subtracting 1 second.\r\n                if (totalTime > 0) {\r\n                    totalTime--;\r\n                    updateTimer();\r\n                    setProgress(timerName, totalTime);\r\n                }\r\n                else {\r\n                    // Mark pomodoro as complete if work-timer has run through.\r\n                    if (currentTimer === 'work') finishedPomodoro();\r\n                    clearInterval(intervalTimer);\r\n                    setTimerRunning(false);\r\n                    playAlarm();\r\n                    getNextTimer();\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    function getNextTimer() {\r\n        let nextTimerName, nextTimerDuration;\r\n\r\n        if (currentTimer === 'work') {\r\n            nextTimerName = 'break';\r\n            nextTimerDuration = breakDuration;\r\n        }\r\n        else {\r\n            nextTimerName = 'work';\r\n            nextTimerDuration = workDuration;\r\n        }\r\n\r\n        switchTimer({nextTimerName, nextTimerDuration});\r\n        setProgress(nextTimerName, nextTimerDuration*60);\r\n    }\r\n\r\n    /* Dynamically alter circle's stroke-offset to indicate timer's progress.\r\n       Inspired by: https://css-tricks.com/building-progress-ring-quickly/*/\r\n    function setProgress(timerName, currentTime) {\r\n        const circle = document.querySelector('.progress-ring-inner');\r\n        const radius = circle.r.baseVal.value;\r\n        const circumference =  2 * Math.PI * radius;\r\n        let timerColor, timerDuration, offset, percent;\r\n\r\n        if (timerName === 'work' || timerName === 'newTask') {\r\n            timerColor = '#E40C2B';\r\n            timerDuration = workDuration;\r\n        }\r\n        else {\r\n            timerColor = '#30DD00';\r\n            timerDuration = breakDuration;\r\n        }\r\n        \r\n        /* Draw progress ring with selected timer colour.\r\n           Dasharray sets the shape to be one continuous dash with no gap (i.e. circle).\r\n           Dashoffset specifies where to start the gap. Altering this simulates progress bar. */\r\n        circle.style.stroke = timerColor;\r\n        circle.style.strokeDasharray = `${circumference} ${circumference}`;\r\n        circle.style.strokeDashoffset = `${circumference}`;\r\n\r\n        /* Determine percentage of total time that has elapsed.\r\n           If user has just updated task, reset to 1 */\r\n        percent = timerName === 'newTask'? 1 : currentTime / (timerDuration * 60);\r\n        offset = circumference - percent * circumference;\r\n        circle.style.strokeDashoffset = offset;\r\n    }\r\n\r\n    function reset() {\r\n        clearInterval(intervalTimer);\r\n        setTimerRunning(false);\r\n        resetTimer();\r\n        setProgress('work', workDuration*60);\r\n    }\r\n\r\n    function addNewTask(newTaskObj) {\r\n        addTask(newTaskObj);\r\n        setProgress('newTask', newTaskObj.workDuration);\r\n    }\r\n\r\n    function closeTaskPage() {\r\n        const taskPage = document.querySelector('.task-page');\r\n        taskPage.classList.remove('show');\r\n        setTimeout(() => setShowTaskPage(false), 500);\r\n    }\r\n    \r\n    function formatTime() {\r\n        const min = Math.floor(timeLeft/60);\r\n        const sec = Math.floor(timeLeft - min * 60);\r\n\r\n        return `${min < 10? '0'+min : min}:${sec < 10? '0'+sec : sec}`;\r\n    }\r\n\r\n    function getCurrentTask() {\r\n        let todo = taskName;\r\n\r\n        if (taskName === '') {\r\n            todo = 'Work'; \r\n        }\r\n\r\n        return currentTimer === 'work'? todo : 'Take a break!';\r\n    }\r\n\r\n    function playAlarm() {\r\n        const alarm = document.getElementById('alarm');\r\n        alarm.currentTime = 0;\r\n        alarm.play();\r\n    }\r\n\r\n    // Cleanup: Clear interval timer and reset all values when component is unmounted.\r\n    useEffect(() => {\r\n        return () => {\r\n            clearInterval(intervalTimer);\r\n            setTimerRunning(false);\r\n            resetTimer();\r\n        }\r\n    }, [resetTimer]);\r\n\r\n    return (\r\n        <div className={`pomodoro-widget container ${showPomodoro? 'fade-in-widget': ''}`}>\r\n            {\r\n                showTaskPage && \r\n                <Task showTaskPage={showTaskPage} addNewTask={addNewTask} closeTaskPage={closeTaskPage} />\r\n            }\r\n            <div className='task-info container'>\r\n                <h2 className='current-task'>{`Todo: ${getCurrentTask()}`}</h2>\r\n                <Meter numOfPomodoros={numOfPomodoros} pomodorosComplete={pomodorosComplete} />\r\n            </div>\r\n            <div className='timer-info container'>\r\n                <ProgressBar \r\n                    allPomodorosComplete={pomodorosComplete === numOfPomodoros}\r\n                    timeLeft={formatTime()} />\r\n                <p className={`pomodoros-complete-msg ${pomodorosComplete === numOfPomodoros? 'show':''}`}>\r\n                    Congratulations! You've earned a well-deserved break.\r\n                </p>\r\n            </div>\r\n            <Controls \r\n                openTaskSettings={setShowTaskPage}\r\n                startStop={startStop} \r\n                reset={reset} \r\n                timerRunning={timerRunning}\r\n                timeLeft={timeLeft}\r\n                pomodorosComplete={pomodorosComplete}\r\n                numOfPomodoros={numOfPomodoros} />\r\n            <Alarm />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        taskName: state.pomodoro.taskName,\r\n        currentTimer: state.pomodoro.currentTimer,\r\n        workDuration: state.pomodoro.workDuration,\r\n        breakDuration: state.pomodoro.breakDuration,\r\n        timeLeft: state.pomodoro.timeLeft,\r\n        numOfPomodoros: state.pomodoro.numOfPomodoros,\r\n        pomodorosComplete: state.pomodoro.pomodorosComplete\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        addTask: (newTask) => dispatch(addTask(newTask)),\r\n        updateTimer: () => dispatch(updateTimer()),\r\n        switchTimer: (nextTimer) => dispatch(switchTimer(nextTimer)),\r\n        resetTimer: () => dispatch(resetTimer()),\r\n        finishedPomodoro: () => dispatch(finishedPomodoro()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Pomodoro);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateStopwatch, pauseStopwatch, resetStopwatch, recordLap } from '../../redux/actions/stopwatchActions';\r\nimport Clockface from './Clockface';\r\nimport Interface from './Interface';\r\nimport './Stopwatch.css';\r\n\r\nlet startTime = 0,\r\n    millisecElapsed = 0,\r\n    intervalTimer;\r\n\r\nconst Stopwatch = (props) => {\r\n    const { \r\n        showStopwatch,\r\n        updateStopwatch,\r\n        pauseStopwatch,\r\n        resetStopwatch,\r\n        recordLap,\r\n        currentElapsedTime,\r\n        totalElapsedTime,\r\n        laps\r\n    } = props;\r\n\r\n    const [stopwatchRunning, setStopwatchRunning] = useState(false);\r\n    const totalTime = totalElapsedTime + currentElapsedTime;\r\n    const DEGREE_OFFSET = 90 // Subtract 90 deg from all degree values due to offset in the CSS.\r\n    \r\n    // Convert elapsed time (in milliseconds) to degrees.\r\n    const secondsDeg = (totalTime/1000)/60*360 - DEGREE_OFFSET; // Degrees to rotate second-hand.\r\n    const minutesDeg = (totalTime/60000)/30*360 - DEGREE_OFFSET; // Degrees to rotate minute-hand.\r\n\r\n    function startPause() {\r\n        // Pause Stopwatch\r\n        if (stopwatchRunning) {\r\n            setStopwatchRunning(false);\r\n            pauseStopwatch(millisecElapsed);\r\n            clearInterval(intervalTimer);\r\n        }\r\n        // Start Stopwatch\r\n        else {\r\n            setStopwatchRunning(true);\r\n            startTime = new Date().getTime();\r\n            /*  Note: Browsers implement throttling of setInterval function calls for intervals < 4ms.\r\n                To compute elapsed time, calculate difference between time NOW and when Stopwatch started.*/\r\n            intervalTimer = setInterval(() => {\r\n                let now = new Date().getTime();\r\n                millisecElapsed = now - startTime;\r\n                updateStopwatch(millisecElapsed);\r\n            }, 10);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        // For larger device screens, animate Stopwatch back to center.\r\n        if (document.documentElement.clientWidth >= 768) {\r\n            document.querySelector('.lap-list').style.width = '0%';\r\n            document.querySelector('.stopwatch').style.width = '100%';\r\n        }\r\n        else {\r\n            document.querySelector('.lap-list').style.width = '100%';\r\n            document.querySelector('.stopwatch').style.width = '100%';\r\n        }\r\n        resetStopwatch();\r\n    }\r\n\r\n    // Convert total elapsed time in milliseconds to digital format (00:00:00).\r\n    function formatDigitalOutput(totalTimeInMillisec) {\r\n        const min = Math.floor(totalTimeInMillisec/60000);\r\n        const sec = Math.floor((totalTimeInMillisec - min*60000) / 1000);\r\n        const secHundredth = Math.floor((totalTimeInMillisec - min*60000 - sec*1000) / 10);\r\n        const timeValues = { min, sec, secHundredth };\r\n        const timeDigital = [];\r\n\r\n        // Prefix time value with a zero if < 10.\r\n        Object.entries(timeValues).forEach(([unit, value]) => {\r\n            let formatted = value < 10? '0' + value : value;\r\n            timeDigital.push(formatted);\r\n        });\r\n\r\n        return timeDigital.join(':');\r\n    }\r\n\r\n    function createLap() {\r\n        // For larger device screens, animate Stopwatch to make room for lap info.\r\n        if (document.documentElement.clientWidth >= 768) {\r\n            document.querySelector('.lap-list').style.width = '50%';\r\n            document.querySelector('.stopwatch').style.width = '50%';\r\n        }\r\n        else {\r\n            document.querySelector('.lap-list').style.width = '100%';\r\n            document.querySelector('.stopwatch').style.width = '100%';\r\n        }\r\n        \r\n        // Save formatted elapsed lap-time and build new lap object to add to the list.\r\n        const time = formatDigitalOutput(currentElapsedTime);\r\n        const newLap = { id: laps.length + 1, time };\r\n        recordLap(newLap);\r\n    }\r\n    \r\n// Dynamically render a list of recorded laps, indicating lap number and time in each list-item.\r\n    const lapList = laps.map(lap => {\r\n        return (\r\n            <li className='lap container' key={lap.id}>\r\n                <div className='lap-number'>Lap {lap.id}</div>\r\n                <div className='lap-time'>{lap.time}</div>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    // Cleanup: Clear interval timer and reset all values when component is unmounted.\r\n    useEffect(() => {\r\n        return () => {\r\n            setStopwatchRunning(false);\r\n            resetStopwatch();\r\n            clearInterval(intervalTimer);\r\n        }\r\n    }, [resetStopwatch]);\r\n\r\n    return (\r\n        <div className={`stopwatch-widget container ${showStopwatch? 'fade-in-widget':''}`}>\r\n            <div className='stopwatch'>\r\n                <Clockface secondsDeg={secondsDeg} minutesDeg={minutesDeg} />\r\n                <p className='total-time'>{formatDigitalOutput(totalTime)}</p>\r\n            </div>\r\n            {/* Dynamically display laps as they are recorded */}\r\n            <ul className='lap-list'>{lapList}</ul>\r\n            <Interface \r\n                createLap={createLap}\r\n                stopwatchRunning={stopwatchRunning} \r\n                startPause={startPause}\r\n                reset ={reset}\r\n                totalTime={totalTime} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currentElapsedTime: state.stopwatch.currentElapsedTime,\r\n        totalElapsedTime: state.stopwatch.totalElapsedTime,\r\n        laps: state.stopwatch.laps\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        updateStopwatch: elapsedTime => dispatch(updateStopwatch(elapsedTime)),\r\n        pauseStopwatch: elapsedTime => dispatch(pauseStopwatch(elapsedTime)),\r\n        resetStopwatch: () => dispatch(resetStopwatch()),\r\n        recordLap: newLap => dispatch(recordLap(newLap))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Stopwatch);\r\n","import { combineReducers } from 'redux';\r\nimport clockReducer from './clockReducer';\r\nimport pomodoroReducer from './pomodoroReducer';\r\nimport stopwatchReducer from './stopwatchReducer';\r\n\r\nexport default combineReducers({\r\n    clock: clockReducer,\r\n    pomodoro: pomodoroReducer,\r\n    stopwatch: stopwatchReducer\r\n});\r\n","import { GET_CURRENT_TIME } from '../actions/types';\r\n\r\nexport default function(state = {}, action) {\r\n    switch(action.type) {\r\n        case GET_CURRENT_TIME:\r\n            return {\r\n                ...state, \r\n                currentTime: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","// Clock Action Types\r\nexport const GET_CURRENT_TIME = 'GET_CURRENT_TIME';\r\n// export const GET_DIFFERENT_TIMEZONE = 'GET_DIFFERENT_TIMEZONE';\r\n\r\n// Pomodoro Timer Action Types\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const UPDATE_TIMER = 'UPDATE_TIMER';\r\nexport const RESET_TIMER = 'RESET_TIMER';\r\nexport const SWITCH_TIMER = 'SWITCH_TIMER';\r\nexport const FINISHED_POMODORO = 'FINISHED_POMODORO';\r\n\r\n// Stopwatch Action Types\r\nexport const UPDATE_STOPWATCH = 'UPDATE_STOPWATCH';\r\nexport const PAUSE_STOPWATCH = 'PAUSE_STOPWATCH';\r\nexport const RESET_STOPWATCH = 'RESET_STOPWATCH';\r\nexport const RECORD_LAP = 'RECORD_LAP';","import { ADD_TASK, UPDATE_TIMER, SWITCH_TIMER, RESET_TIMER, FINISHED_POMODORO } from '../actions/types';\r\n\r\nexport default function(state = {}, action) {\r\n    switch(action.type) {\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                taskName: action.payload.taskName,\r\n                workDuration: action.payload.workDuration,\r\n                breakDuration: action.payload.breakDuration,\r\n                timeLeft: action.payload.workDuration * 60,\r\n                numOfPomodoros: action.payload.numOfPomodoros,\r\n                pomodorosComplete: 0\r\n            }\r\n            \r\n        case UPDATE_TIMER:\r\n            return {\r\n                ...state,\r\n                timeLeft: state.timeLeft - 1\r\n            }\r\n\r\n        case RESET_TIMER:\r\n            return {\r\n                ...state,\r\n                currentTimer: 'work',\r\n                timeLeft: state.workDuration*60,\r\n                pomodorosComplete: 0\r\n            }\r\n\r\n        case SWITCH_TIMER:\r\n            return {\r\n                ...state,\r\n                currentTimer: action.payload.nextTimerName,\r\n                timeLeft: action.payload.nextTimerDuration*60\r\n            }\r\n\r\n        case FINISHED_POMODORO:\r\n            return {\r\n                ...state,\r\n                pomodorosComplete: state.pomodorosComplete + 1\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { UPDATE_STOPWATCH, PAUSE_STOPWATCH, RESET_STOPWATCH, RECORD_LAP } from '../actions/types';\r\n\r\nexport default function(state = {}, action) {\r\n    switch(action.type) {\r\n        case UPDATE_STOPWATCH:\r\n            return {\r\n                ...state,\r\n                currentElapsedTime: action.payload\r\n            };\r\n        case PAUSE_STOPWATCH:\r\n            return {\r\n                ...state,\r\n                currentElapsedTime: 0,\r\n                totalElapsedTime: state.totalElapsedTime + action.payload\r\n            }\r\n        case RESET_STOPWATCH:\r\n            return {\r\n                ...state,\r\n                currentElapsedTime: 0,\r\n                totalElapsedTime: 0,\r\n                laps: []\r\n            };\r\n        case RECORD_LAP:\r\n            return {\r\n                ...state,\r\n                laps: [action.payload, ...state.laps]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst initialState = {\r\n    clock: {\r\n        currentTime: {\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: 0,\r\n            date: ''\r\n        }\r\n    },\r\n    pomodoro: {\r\n        taskName: '',\r\n        currentTimer: 'work',\r\n        workDuration: 25,\r\n        breakDuration: 5,\r\n        timeLeft: 1500,\r\n        numOfPomodoros: 4,\r\n        pomodorosComplete: 0\r\n    },\r\n    stopwatch: {\r\n        currentElapsedTime: 0,\r\n        totalElapsedTime: 0,\r\n        laps: []\r\n    }\r\n};\r\n\r\nconst middleWare = [thunk];\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middleWare));\r\n\r\nexport default store;","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdAccessTime } from 'react-icons/md';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className='loader container'>\r\n            <div className='loader-logo-wrapper container'>\r\n                <div className='loader-triangle-group container'>\r\n                    <div className='loader-triangle'></div>\r\n                    <div className='loader-triangle'></div>\r\n                    <div className='loader-triangle'></div>\r\n                </div>\r\n                <div className='loader-circle container'></div>\r\n                <div className='loader-timer container'>\r\n                    <IconContext.Provider value={{className: 'loader-timer-icon'}}>\r\n                        <MdAccessTime />\r\n                    </IconContext.Provider>\r\n                </div>\r\n            </div>\r\n            <div className='loader-text'>tri-timer</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\n\r\nconst Header = ({ currentApp, themeColor, appChanged, resetAppChange }) => {\r\n    // Remove animation effects after user clicks on a widget\r\n    setTimeout(() => resetAppChange(false), 450);\r\n\r\n    return (\r\n        <header className='container'>\r\n            <div className='logo-title container'>\r\n                <div className={`app-logo ${appChanged? 'animate-logo':''}`} style={{borderLeftColor: `${themeColor}`}}></div>\r\n                <h1 className={`app-title ${appChanged? 'fade-in-text':''}`}>{currentApp.replace('-', ' ')}</h1>\r\n            </div>\r\n            <a className='author' href='https://davidcjwest.tk/' target='_blank' rel=\"noopener noreferrer\">\r\n                &copy; 2020 David van der Westhuizen\r\n            </a>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdAccessTime, MdTimer, MdAvTimer } from 'react-icons/md';\r\n\r\nconst Navbar = ({ setApp }) => {\r\n\r\n    const handleClick = e => setApp(e.target.value);\r\n\r\n    return (\r\n        <nav className='container'>\r\n            <ul className='container'>\r\n                <li>\r\n                    <button value='Clock' className='container btn btn-clock' onClick={handleClick}>\r\n                        <IconContext.Provider value={{className:'icon icon-clock'}}>\r\n                            <MdAccessTime />\r\n                        </IconContext.Provider>\r\n                        <span>Clock</span>\r\n                    </button>\r\n                </li>\r\n                <li>\r\n                    <button value='Pomodoro-Timer' className='container btn btn-pomodoro' onClick={handleClick}>\r\n                        <IconContext.Provider value={{className: 'icon icon-pomodoro'}}>\r\n                            <MdAvTimer />\r\n                        </IconContext.Provider>\r\n                        <span>Pomodoro Timer</span>\r\n                    </button>\r\n                </li>\r\n                <li>\r\n                    <button value='Stopwatch' className='container btn btn-stopwatch' onClick={handleClick}>\r\n                        <IconContext.Provider value={{className: 'icon icon-stopwatch'}}>\r\n                            <MdTimer />\r\n                        </IconContext.Provider>\r\n                        <span>Stopwatch</span>\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './Clock.css';\r\n\r\nconst Clock = ({ currentTime, showClock }) => {\r\n    // Create hour and minute arrays of [1 -> 12] and [1 -> 60] respectively.\r\n    const hoursArr = [...Array(12).keys()].map(x => ++x);\r\n    const minutesArr = [...Array(60).keys()].map(x => ++x);\r\n    const DEGREE_OFFSET = 90 // Subtract 90 deg from all degree values due to offset in the CSS.\r\n    \r\n    /*  Generate hour elements and position on the clock-face.\r\n        Hours are first centered on the clock-face with CSS and then positioned\r\n        dynamically with JS */\r\n    const hourElements = hoursArr.map((hour, index) => {\r\n        let degToRotate = (hour * 360 / 12) - DEGREE_OFFSET; \r\n            return (\r\n                <div \r\n                    className='hour-position' \r\n                    style={{transform: `rotate(${degToRotate}deg) translateX(${7}em)`}}\r\n                    key={index}>\r\n                    {/* Note: Rotation causes text to rotate as well, therefore rotate child back by same amount */}\r\n                    <div \r\n                        className='hour'\r\n                        style={{transform: `rotate(${-degToRotate}deg)`}}>\r\n                        {hour}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        /*  Generate minute elements and position on the clock-face.\r\n            Every 5th-minute element receives slightly different styling. */\r\n        const minuteElements = minutesArr.map((min, index) => {\r\n            let degToRotate = (min * 360 / 60) - DEGREE_OFFSET;\r\n            let emsToTranslate = min % 5 === 0? 7.9 : 8.2;\r\n\r\n            return (\r\n                <div \r\n                    className='minute-position'\r\n                    style={{transform: `rotate(${degToRotate}deg) translateX(${emsToTranslate}em)`}}\r\n                    key={index}>\r\n                </div>\r\n            );\r\n        });\r\n\r\n        /*  Compute the rotation of each clock hand as each second ticks by.\r\n            Additional \"transition degrees\" for minute/hour hands to make them slowly transition to next\r\n            minute/hour, instead of abruptly. */\r\n        const secondsDeg = (currentTime.seconds/60 * 360) - DEGREE_OFFSET;\r\n        const minuteTransitionDeg = currentTime.seconds === 0? 0 : 6/60; // 6deg divided by 60sec since 1 min = 6deg.\r\n        const minutesDeg = (currentTime.minutes/60 * 360) + minuteTransitionDeg*currentTime.seconds - DEGREE_OFFSET;\r\n        const hourTransitionDeg = currentTime.minutes === 0? 0 : 30/3600; // 30deg divided by 3600sec since 1 hr = 30deg.\r\n        const hoursDeg = (currentTime.hours/12 * 360) + hourTransitionDeg*(currentTime.minutes*60+currentTime.seconds) - DEGREE_OFFSET;\r\n\r\n    return (\r\n        <div className={`clock-widget container ${showClock? 'fade-in-widget':''}`}>\r\n            <div className='clock'>\r\n                <div className='clock-face'>\r\n                    <div className=\"hand hour-hand\" style={{transform: `rotate(${hoursDeg}deg) translateY(${-50}%)`}}></div>\r\n                    <div className=\"hand min-hand\" style={{transform: `rotate(${minutesDeg}deg) translateY(${-50}%)`}}></div>\r\n                    <div className=\"hand sec-hand\" style={{transform: `rotate(${secondsDeg}deg) translate(${-7}%,${-50}%)`}}></div>\r\n                    <div>{hourElements}</div>\r\n                    <div>{minuteElements}</div>\r\n                </div>\r\n            </div>\r\n            <p className='date-info'>{currentTime.date}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { currentTime: state.clock.currentTime }\r\n  }\r\n\r\nexport default connect(mapStateToProps)(Clock);\r\n","import React from 'react';\r\nimport alarmUrl from '../../assets/pomodoro_alarm.mp3';\r\n\r\nconst Alarm = () => {\r\n    return (\r\n        <div>\r\n            <audio id='alarm' src={alarmUrl} ></audio>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Alarm;\r\n","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdPlayArrow, MdPause, MdRefresh, MdNoteAdd } from 'react-icons/md';\r\n\r\nconst Controls = ({ openTaskSettings, startStop, reset, timerRunning, timeLeft, numOfPomodoros, pomodorosComplete }) => {\r\n    return (\r\n        <div className='controls container'>\r\n            <div className='pt-btn-group container'>\r\n                {/* Restart button. Disabled when elapsed Timer reaches zero. */}\r\n                <button \r\n                    className={`pt-restart-btn ${timeLeft === 0? 'disabled':''}`} \r\n                    onClick={reset} >\r\n                    <IconContext.Provider value={{className: 'icon pt-restart-icon'}}>\r\n                        <MdRefresh />\r\n                    </IconContext.Provider>\r\n                </button>\r\n                {/* Start/Pause button. Icon alternates based on whether Timer is running. */}\r\n                <button \r\n                    className={`pt-start-btn ${pomodorosComplete === numOfPomodoros? 'disabled':''}`} \r\n                    onClick={startStop}\r\n                    disabled={pomodorosComplete === numOfPomodoros} >\r\n                    <IconContext.Provider value={{className: 'icon pt-start-icon'}}>\r\n                        {!timerRunning && <MdPlayArrow />}\r\n                        {timerRunning && <MdPause/>}\r\n                    </IconContext.Provider>\r\n                </button>\r\n                {/* Add Task button. Functional only when Timer is stopped. */}\r\n                <button \r\n                    className={`pt-add-btn ${timerRunning? 'disabled':''}`} \r\n                    onClick={() => openTaskSettings(true)} \r\n                    disabled={timerRunning} >\r\n                    <IconContext.Provider value={{className: 'icon pt-add-icon'}}>\r\n                        <MdNoteAdd />\r\n                    </IconContext.Provider>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controls;\r\n","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { GiTomato } from \"react-icons/gi\";\r\n\r\nconst Meter = ({ numOfPomodoros, pomodorosComplete }) => {\r\n    const pomodoroMeter = [...new Array(numOfPomodoros)].map((item, index) => {\r\n        item = ++index;\r\n        /* Add styling according to how many pomodoros have been completed.\r\n           Current pomodoro has a pulse effect; completed pomodoros light up. */\r\n        let currentPomodoro = pomodorosComplete + 1;\r\n        let pomodoroClasses = item <= pomodorosComplete? 'pomodoro complete':\r\n                               item === currentPomodoro? 'pomodoro current':'pomodoro';\r\n        return (\r\n            <li className={pomodoroClasses} key={index}>\r\n                <IconContext.Provider value={{className: 'pomodoro-icon'}}><GiTomato /></IconContext.Provider>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <ul className='pomodoro-meter container'>\r\n            {pomodoroMeter}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Meter;\r\n","import React from 'react';\r\n\r\n/* Circular progress bar based off an SVG element with an outer and inner circle element.\r\n   Inner circle's stroke offset is dynamically altered to indicate timer's progress.\r\n   Inspired by: https://css-tricks.com/building-progress-ring-quickly/ */\r\n\r\nconst ProgressBar = ({ allPomodorosComplete, timeLeft }) => {\r\n    return (\r\n        <div className={`timer container ${allPomodorosComplete? 'fall':''}`}>\r\n            <svg className='progress-ring'>\r\n                <circle\r\n                    className='progress-ring-outer'\r\n                    r={`8.4em`}\r\n                    cx={`9em`}\r\n                    cy={`9em`} />\r\n                <circle\r\n                    className='progress-ring-inner'\r\n                    r={`8.4em`}\r\n                    cx={`9em`}\r\n                    cy={`9em`} />\r\n            </svg>\r\n            <p className='time-left'>{timeLeft}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdArrowBack, MdCheck } from 'react-icons/md';\r\n\r\nconst Task = (props) => {\r\n    const {\r\n        showTaskPage,\r\n        addNewTask,\r\n        closeTaskPage,\r\n        taskName,\r\n        numOfPomodoros,\r\n        workDuration,\r\n        breakDuration\r\n    } = props;\r\n    const { register, handleSubmit, errors } = useForm();\r\n\r\n    // Generate Pomodoro Number options.\r\n    const pomodoroNumList = [...Array(30).keys()].map((num, index) => {\r\n        num = ++index;\r\n        return (\r\n            <option key={index}>{num}</option>\r\n        );\r\n    });\r\n\r\n    // Generate Pomodoro Duration options.\r\n    const pomodoroDurationList = [...Array(120).keys()].map((minute, index) => {\r\n        minute = ++index;\r\n        return (\r\n            <option key={index}>{minute}</option>\r\n        );\r\n    });\r\n\r\n    // Generate Break Duration options.\r\n    const breakDurationList = [...Array(60).keys()].map((minute, index) => {\r\n        minute = ++index;\r\n        return (\r\n            <option key={index}>{minute}</option>\r\n        );\r\n    });\r\n\r\n    // Handle submit and build new task object to update state. Close page on submit.\r\n    const onSubmit = taskSettings => {\r\n        const newTask = {\r\n            taskName : taskSettings.taskName,\r\n            numOfPomodoros : parseInt(taskSettings.pomodoroNumber),\r\n            workDuration : parseInt(taskSettings.pomodoroDuration),\r\n            breakDuration : parseInt(taskSettings.breakDuration)\r\n        }\r\n        addNewTask(newTask);\r\n        closeTaskPage();\r\n    }\r\n\r\n    return (\r\n        <div className={`task-page container ${showTaskPage? 'show': ''}`}>\r\n            <div className='task-page-header'>\r\n                <button className='back-btn container' onClick={closeTaskPage}>\r\n                    <IconContext.Provider value={{className: 'back-btn-icon'}} ><MdArrowBack /></IconContext.Provider>\r\n                    <span>Back</span>\r\n                </button>\r\n                <h3>Task Settings</h3>\r\n            </div>\r\n            <form className='task-settings-form' onSubmit={handleSubmit(onSubmit)}>\r\n                <div className='input-container'>\r\n                    <label htmlFor='taskName'>Task Name</label>\r\n                    <input \r\n                        id='taskName' \r\n                        name='taskName' \r\n                        placeholder='What is your focus today?' \r\n                        type='text'\r\n                        defaultValue={taskName}\r\n                        onFocus={e => e.target.select()}\r\n                        className='input-field' \r\n                        ref={register({maxLength:30})} />\r\n                    {errors.taskName && <p className='error'>Please enter a shorter task name (max: 30 characters).</p>}\r\n                </div>\r\n                <div className='input-container'>\r\n                    <label htmlFor='pomodoroNumber'>Pomodoro Number</label>\r\n                    <select \r\n                        id='pomodoroNumber' \r\n                        name='pomodoroNumber' \r\n                        className='input-field' \r\n                        ref={register} \r\n                        defaultValue={numOfPomodoros} >\r\n                        {pomodoroNumList}\r\n                    </select>\r\n                </div>\r\n                <div className='input-container'>\r\n                    <label htmlFor='pomodoroDuration'>Pomodoro Duration (minutes)</label>\r\n                    <select \r\n                        id='pomodoroDuration' \r\n                        name='pomodoroDuration' \r\n                        className='input-field' \r\n                        ref={register} \r\n                        defaultValue={workDuration}>\r\n                        {pomodoroDurationList}\r\n                    </select>\r\n                </div>\r\n                <div className='input-container'>\r\n                    <label htmlFor='breakDuration'>Break Duration (minutes)</label>\r\n                    <select \r\n                        id='breakDuration' \r\n                        name='breakDuration' \r\n                        className='input-field' \r\n                        ref={register} \r\n                        defaultValue={breakDuration} >\r\n                        {breakDurationList}\r\n                    </select>\r\n                </div>\r\n                <button className='submit-btn container'>\r\n                    <span>Submit</span>\r\n                    <IconContext.Provider value={{className: 'submit-btn-icon'}} ><MdCheck /></IconContext.Provider>\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        taskName: state.pomodoro.taskName,\r\n        numOfPomodoros: state.pomodoro.numOfPomodoros,\r\n        workDuration: state.pomodoro.workDuration,\r\n        breakDuration: state.pomodoro.breakDuration\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Task);\r\n","import { ADD_TASK, UPDATE_TIMER, SWITCH_TIMER, RESET_TIMER, FINISHED_POMODORO } from './types';\r\n\r\nexport const addTask = (newTask) => dispatch => {\r\n    dispatch({\r\n        type: ADD_TASK,\r\n        payload: newTask\r\n    });\r\n}\r\n\r\nexport const updateTimer = () => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_TIMER\r\n    });\r\n}\r\n\r\nexport const switchTimer = (nextTimer) => dispatch => {\r\n    dispatch({\r\n        type: SWITCH_TIMER,\r\n        payload: nextTimer\r\n    });\r\n}\r\n\r\nexport const resetTimer = () => dispatch => {\r\n    dispatch({\r\n        type: RESET_TIMER\r\n    });\r\n}\r\n\r\nexport const finishedPomodoro = () => dispatch => {\r\n    dispatch({\r\n        type: FINISHED_POMODORO\r\n    });\r\n}\r\n","import React from 'react';\r\n\r\nconst Clockface = ({ minutesDeg, secondsDeg}) => {\r\n    /* Create two sets of arrays for rendering seconds/minutes:\r\n       One for 5-sec/min increments and one for every in between \"sub\" unit. */\r\n    const secondValuesArr = [...Array(12).keys()].map(x => ++x*5);\r\n    const secondMarkersArr = [...Array(300).keys()].map(x => ++x);\r\n    const minuteValuesArr = [...Array(6).keys()].map(x => ++x*5);\r\n    const minuteMarkersArr = [...Array(90).keys()].map(x => ++x);\r\n    const DEGREE_OFFSET = 90; // Subtract 90 deg from all degree values due to offset in the CSS.\r\n\r\n    // Create 12 second values to be shown on the clockface. Range: 5 -> 60 in 5-sec increments.\r\n    const secondValues = secondValuesArr.map((sec, index) => {\r\n        let degToRotate = (++index/12 * 360) - DEGREE_OFFSET;\r\n        return (\r\n            <div \r\n                className='sw-sec-position'\r\n                key={index}\r\n                style={{transform: `rotate(${degToRotate}deg) translateX(${7}em)`}}>\r\n                <div \r\n                    className='sw-sec-number'\r\n                    style={{transform: `rotate(${-degToRotate}deg)`}}>\r\n                    {sec}\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    /*  Create 300 second markers: Each marker is a fifth of a second. Every 5th marker represents one second.\r\n        Every 25th marker indicates a displayed second value. */\r\n    const secondMarkers = secondMarkersArr.map((sec, index) => {\r\n        let degToRotate = (sec/300 * 360) - DEGREE_OFFSET;\r\n        let emsToTranslate = sec % 5 === 0?\r\n                             sec % 25 === 0 ? 7.8 : 8\r\n                             : 8.3;\r\n        return (\r\n            <div \r\n                className='sw-sec-marker'\r\n                key={index}\r\n                style={{transform: `rotate(${degToRotate}deg) translate(${emsToTranslate}em)`}}>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    // Create 6 minute values to be shown on the inner clockface. Range: 5 -> 30 in 5-sec increments.\r\n    const minuteValues = minuteValuesArr.map((min, index) => {\r\n        let degToRotate = (++index/6 * 360) - DEGREE_OFFSET;\r\n        return (\r\n            <div\r\n                className='sw-min-position'\r\n                key={index}\r\n                style={{transform: `rotate(${degToRotate}deg) translate(${3}em)`}}>\r\n                <div\r\n                    style={{transform: `rotate(${-degToRotate}deg)`}}>\r\n                    {min}\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n    /*  Create 90 minute markers: Each marker is a third of a minute. Every 3rd marker represents one minute.\r\n        Every 15th marker indicates a displayed minute value. */\r\n    const minuteMarkers = minuteMarkersArr.map((min, index) => {\r\n        let degToRotate = (min/90 * 360) - DEGREE_OFFSET;\r\n        let emsToTranslate = min % 3 === 0?\r\n                             min % 15 === 0? 3.8 : 4\r\n                             : 4.3;\r\n        return (\r\n            <div\r\n                className='sw-min-marker'\r\n                key={index}\r\n                style={{transform: `rotate(${degToRotate}deg) translate(${emsToTranslate}em)`}}>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className='sw-sec-face'>{/* Outer Second Clockface */}\r\n            <div \r\n                className='sw-hand sw-sec-hand'\r\n                style={{transform: `rotate(${secondsDeg}deg) translate(${-7}%, ${-50}%)`}}>\r\n            </div>\r\n            <div\r\n                className='sw-hand sw-min-hand'\r\n                style={{transform: `rotate(${minutesDeg}deg)`}}>\r\n            </div>\r\n            <div>{secondValues}</div>\r\n            <div>{secondMarkers}</div>\r\n            {/* Inner Minute Clockface */}\r\n            <div className='sw-min-face'>\r\n                <div>{minuteValues}</div>\r\n                <div>{minuteMarkers}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Clockface;\r\n","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { MdPlayArrow, MdRefresh, MdPause, MdTimer } from 'react-icons/md';\r\n\r\nconst Interface = ({ stopwatchRunning, totalTime, createLap, startPause, reset }) => {\r\n    return (\r\n        <div className='interface container'>\r\n            <div className='container sw-btn-group'>\r\n                {/* Restart button. Functional only while Stopwatch is paused & elapsed time is non-zero */}\r\n                <button \r\n                    className={`sw-restart-btn ${stopwatchRunning || totalTime === 0? 'disabled':''}`}\r\n                    onClick={reset}\r\n                    disabled={stopwatchRunning}>\r\n                    <IconContext.Provider value={{className: 'icon sw-restart-icon'}}>\r\n                        <MdRefresh />\r\n                    </IconContext.Provider>\r\n                </button>\r\n                {/* Start/Pause button. Icon alternates based on whether Stopwatch is running. */}\r\n                <button className='sw-start-btn' onClick={startPause}>\r\n                    <IconContext.Provider value={{className: 'icon sw-start-icon'}}>\r\n                        {!stopwatchRunning && <MdPlayArrow />}\r\n                        {stopwatchRunning && <MdPause />}\r\n                    </IconContext.Provider>\r\n                </button>\r\n                {/* Record Lap button. Functional only while Stopwatch is running. */}\r\n                <button \r\n                    className={`sw-lap-btn ${stopwatchRunning? '':'disabled'}`}\r\n                    onClick={createLap}\r\n                    disabled={!stopwatchRunning}>\r\n                    <IconContext.Provider value={{className: 'icon sw-lap-icon'}}>\r\n                        <MdTimer />\r\n                    </IconContext.Provider>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Interface;\r\n","import { UPDATE_STOPWATCH, PAUSE_STOPWATCH, RESET_STOPWATCH, RECORD_LAP } from './types';\r\n\r\nexport const updateStopwatch = (elapsedTime) => dispatch => {\r\n    dispatch({\r\n        type: UPDATE_STOPWATCH,\r\n        payload: elapsedTime\r\n    });\r\n}\r\n\r\nexport const pauseStopwatch = (elapsedTime) => dispatch => {\r\n    dispatch({\r\n        type: PAUSE_STOPWATCH,\r\n        payload: elapsedTime\r\n    });\r\n}\r\n\r\nexport const resetStopwatch = () => dispatch => {\r\n    dispatch({\r\n        type: RESET_STOPWATCH\r\n    });\r\n}\r\n\r\nexport const recordLap = (lapTime) => dispatch => {\r\n    dispatch({\r\n        type: RECORD_LAP,\r\n        payload: lapTime\r\n    });\r\n}\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getCurrentTime } from '../redux/actions/clockActions';\r\nimport './App.css';\r\nimport Loader from './Loader/Loader';\r\nimport Header from './Header';\r\nimport Navbar from './Navbar';\r\nimport Clock from './Clock/Clock';\r\nimport Pomodoro from './Pomodoro/Pomodoro';\r\nimport Stopwatch from './Stopwatch/Stopwatch';\r\n\r\nconst App = ({ getCurrentTime }) => {\r\n  // State to handle which app is rendered\r\n  const [selectedApp, setSelectedApp] = useState('Clock');\r\n  const [showClock, setShowClock] = useState(true);\r\n  const [showPomodoro, setShowPomodoro] = useState(false);\r\n  const [showStopwatch, setShowStopwatch] = useState(false);\r\n  // State to trigger animation effects\r\n  const [appChanged, setAppChanged] = useState(false);\r\n  const [theme, setTheme] = useState('#0049FF');\r\n\r\n  // Get device's current time first, since clock widget is mounted by default.\r\n  setInterval(getCurrentTime, 1000);\r\n\r\n  function setApp(name) {\r\n    // Don't do anything if user clicks same widget button multiple times.\r\n    if (selectedApp === name) return;\r\n\r\n    const themeColor =  window\r\n                          .getComputedStyle(document.documentElement)\r\n                          .getPropertyValue(`--${name.toLowerCase()}`);\r\n\r\n    setSelectedApp(name);\r\n    setTheme(themeColor);\r\n    setAppChanged(true);\r\n\r\n    switch(name) {\r\n      case 'Clock':\r\n        setShowClock(true);\r\n        setShowPomodoro(false);\r\n        setShowStopwatch(false);\r\n        break;\r\n      case 'Pomodoro-Timer':\r\n        setShowPomodoro(true);\r\n        setShowClock(false);\r\n        setShowStopwatch(false);\r\n        break;\r\n      case 'Stopwatch':\r\n        setShowStopwatch(true);\r\n        setShowClock(false);\r\n        setShowPomodoro(false);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Loader />\r\n      <Header \r\n        currentApp={selectedApp} \r\n        themeColor={theme}\r\n        appChanged={appChanged}\r\n        resetAppChange={setAppChanged} \r\n         />\r\n      <div className='widget container'>\r\n        {showClock && <Clock showClock={showClock} />}\r\n        {showPomodoro && <Pomodoro showPomodoro={showPomodoro} />}\r\n        {showStopwatch && <Stopwatch showStopwatch={showStopwatch} />}\r\n      </div>\r\n      <Navbar setApp={setApp} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n      getCurrentTime: () => dispatch(getCurrentTime())\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { GET_CURRENT_TIME } from './types';\r\n\r\nexport const getCurrentTime = () => dispatch => {\r\n    const currentTime = new Date();\r\n    const months = ['January','February','March','April','May','June','July','August','September','October','November','December'];\r\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const currentTimeObj = {\r\n        hours: currentTime.getHours(),\r\n        minutes: currentTime.getMinutes(),\r\n        seconds: currentTime.getSeconds(),\r\n        date: `${days[currentTime.getDay()]}, ${currentTime.getDate()} ${months[currentTime.getMonth()]} ${currentTime.getFullYear()}`\r\n    }\r\n    dispatch({\r\n        type: GET_CURRENT_TIME,\r\n        payload: currentTimeObj\r\n    });\r\n}\r\n\r\n// TODO: Implement feature to view time in different timezones\r\n// export const getDifferentTimezone = () => dispatch => {\r\n//     fetch(\"http://worldtimeapi.org/api/timezone/America/Argentina/Salta\")\r\n//         .then(res => res.json())\r\n//         .then(timezoneData => dispatch({\r\n//             type: GET_DIFFERENT_TIMEZONE,\r\n//             payload: timezoneData\r\n//         }));\r\n// }\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}